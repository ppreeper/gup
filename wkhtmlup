#!/bin/sh
REPO="https://github.com/wkhtmltopdf/wkhtmltopdf"
TAGFILTER="refs/tags"
APP="caddy"
APPBIN=$(which $APP)
APPVER="${APPBIN} version 2>&1 | grep -i "^v" | awk '{print \$1}'"

BDIR="/usr/local/bin"
GLS="git ls-remote --tags ${REPO}"
TGS="grep ${TAGFILTER}"
TFIELD="awk '{print \$2}'"
RCFILT="grep -v -e \"{}\$\" -e alpha -e beta -e \"[Rr][Cc].*\$\""
TGTRIM="sed 's/refs\/tags\///'"
TGS1="sort | uniq | tail -1"
TGS2="sort -g | uniq | tail -1"

V="${GLS} | ${TGS} | ${TFIELD} | ${RCFILT} | ${TGTRIM}"
major=$(eval "${V} | awk -F'.' '{print \$1}' | ${TGS1}")
minor=$(eval "${V} | grep ${major} | awk -F'.' '{print \$2}' | ${TGS2}")
patch=$(eval "${V} | grep ${major}.${minor} | awk -F'.' '{print \$3}' | ${TGS2}")

vers=""
[ -z "${patch}" ] && vers=$major.$minor || vers=$major.$minor.$patch
echo $vers

############################################
# update wkhtmltopdf from website for headers extension
# gitrepo="https://github.com/wkhtmltopdf/wkhtmltopdf"

# revs=$( git ls-remote --tags ${gitrepo} | grep refs/tags/ | grep -v -e beta -e rc[123456789] -e '{' -e '}'| awk '{print $2}' | sed "s/refs\/tags\///")

# major=""
# for r in $revs
# do
#     echo $r
# done

#echo $revs
# major=$(echo $revs | awk -F'.' '{print $1}' | sort -g | uniq | tail -1)
#major=$( git ls-remote --tags ${gitrepo} | grep refs/tags/ | grep -v -e beta -e rc[123456789] | awk '{print $2}' | sed "s/refs\/tags\///" | awk -F'.' '{print $1}'| sort -g | uniq | tail -1)
# echo $major
# minor=$( echo $revs | awk -F'.' '{print $2}' | sort -g | uniq | tail -1)
#minor=$( git ls-remote --tags ${gitrepo} | grep refs/tags/ | grep -v -e beta -e rc[123456789] | awk '{print $2}' | sed "s/refs\/tags\///" | grep ^$major | awk -F'.' '{print $2}' | sort -g | uniq | tail -1)
# echo $major.$minor
# patch=$( echo $revs | awk -F'.' '{print $3}')
#patch=$( git ls-remote --tags ${gitrepo} | grep refs/tags/ | grep -v -e beta -e rc[123456789] | awk '{print $2}' | sed "s/refs\/tags\///" | grep ^$major.$minor | awk -F'.' '{print $3}' | sort -g | uniq | tail -1)


download() {
    echo "download $1 version"
    echo "installing ${vers}"
    FN="${APP}-${vers}-linux-amd64.tar.gz"
    sudo rm -f /tmp/${FN}
    echo wget -qc ${REPO}/releases/download/${vers}/${APP}-${vers}-linux-amd64.tar.gz -O /tmp/${vers}.linux-amd64.tar.gz
    echo sudo rm -f ${BDIR}/${APP}*
    echo sudo mkdir -p /tmp/${vers}
    echo sudo tar axf /tmp/${vers}.linux-amd64.tar.gz -C /tmp/${vers} --strip-components=1
    echo sudo install /tmp/${vers}/${APP}* ${BDIR}/.
    echo sudo rm -f /tmp/${vers}.linux-amd64.tar.gz
    sudo rm -f /tmp/${FN}
}

uptodate() {
    echo "version is current"
}

if [ -z "${APPBIN}" ]; then
    echo "not installed"
    download new
else
    APPMAJOR=$(eval $APPVER | awk -F'.' '{print $1}')
    APPMINOR=$(eval $APPVER | awk -F'.' '{print $2}')
    APPPATCH=$(eval $APPVER | awk -F'.' '{print $3}')
    if [ $((${APPMAJOR})) -lt $((${major})) ]; then
        download major
    else
        if [ $((${APPMINOR})) -lt $((${minor})) ]; then
            download minor
        else
            if [ $((${APPPATCH})) -lt $((${patch})) ]; then
                download patch
            else
                uptodate
            fi
        fi
    fi
fi
